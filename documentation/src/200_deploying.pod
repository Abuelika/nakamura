=head1 Deploying

Once built (See the chapter on building), there will be the following jar
available: app/target/org.sakaiproject.kernel.app-0.1-SNAPSHOT.jar

=head2 Accessing the next generation sakai directly via built in jetty

The built jar can be transferred to a production server and run via:

$ java -server -Xms256m -Xmx1500m -XX:MaxPermSize=64m -Djava.awt.headless=true -Duser.timezone=Europe/London -jar app/target/org.sakaiproject.kernel.app-0.1-SNAPSHOT.jar

You should see something like the following appear:

 12.05.2009 10:27:10.642 *INFO* [main] Setting sling.home=sling (default)
 12.05.2009 10:27:10.643 *INFO* [main] Starting Sling in sling
 12.05.2009 10:27:10.645 *INFO* [main] Checking launcher JAR in sling
 12.05.2009 10:27:10.695 *INFO* [main] Installed or Updated launcher JAR file from jar:file:/home/sling/org.sakaiproject.kernel
 .app-0.1-SNAPSHOT.jar!/resources/org.apache.sling.launchpad.base.jar
 12.05.2009 10:27:10.695 *INFO* [main] Loading launcher class org.apache.sling.launchpad.base.app.MainDelegate
 12.05.2009 10:27:10.741 *INFO* [main] Starting launcher ...
 12.05.2009 10:27:10.743 *INFO* [main] HTTP server port: 8080
 ...
 12.05.2009 10:27:21.742 *INFO* [main] Startup completed

This will start up a Jetty web server (http://www.mortbay.org/) HTTP listener
on port 8080, which a local web browser can access via http://localhost:8080,
for example. The -server option selects the server JVM, -Xms and -Xmx specify
the minimum and maximum heap sizes respectively - you'll want to tailor these
for your particular hardware setup, -XX:MaxPermSize specifies a maximum perm
size, -Djava.awt.headless=true selects headless mode - a system configuration
which assumes the display device, keyboard, or mouse are lacking,
-Duser.timezone=Europe/London sets an appropriate timezone - again you'll want
to tailor this.

=head3 Felix web management console

To access the Felix web management console, visit

http://localhost:8080/system/console/

and log in using the default administrator's account (username: admin;
password: admin).  

The Felix console provides management access to bundles, components,
configuration, deployment packages, licensing, logging and events, OSGi
repository, script engines (e.g., JavaScript, JSP, Groovy), threading, system
info, etc.

=head2 Startup switches for the next generation sakai

There are some further switches available when starting up, documented at
http://cwiki.apache.org/confluence/display/SLING/The+Sling+Launchpad

Examples:

-f - will log to stdout

eg

java -jar app/target/org.sakaiproject.kernel.app-0.1-SNAPSHOT.jar -f -

-l sets the log level 0 = none, 1 = error , 2 = warn, 3 = info, 4 = debug

eg java -jar app/target/org.sakaiproject.kernel.app-0.1-SNAPSHOT.jar -f - -l 4

and if you want to attach a debugger right at the start of startup
(suspend=y), log at debug to stdout

java -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y -jar app/target/org.sakaiproject.kernel.app-0.1-SNAPSHOT.jar -f - -l 4 

=head2 Load balancing behind apache httpd server

There will also be an AJP listener available on port 8009. Thus, apache httpd
or another such web server can be used as a reliable and fast front end to the
next generation sakai application. The mod_jk apache httpd module will be
required, e.g. in the httpd configuration you will need:

LoadModule jk_module /usr/lib/apache2/modules/mod_jk.so

JkWorkersFile /etc/libapache2-mod-jk/workers.properties

JkLogFile /var/log/apache2/mod_jk.log

JkLogLevel info

JkLogStampFormat "[%a %b %d %H:%M:%S %Y] "

JkOptions +ForwardKeySize +ForwardURICompat -ForwardDirectories

JkRequestLogFormat "%w %V %T"

Then in the /etc/libapache2-mod-jk/workers.properties you need to define where
the next generation sakai is listening, e.g.:

worker.list=sakai

worker.localhost.port=8009

worker.localhost.host=localhost

worker.localhost.type=ajp13

worker.sakai.type=lb

worker.sakai.balanced_workers=localhost

worker.sakai.sticky_session=true

Then you can map a URL across to the next generation sakai instance, e.g.:

JkMount /* sakai
