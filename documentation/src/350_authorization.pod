=head1 Authorization

=head2 Building on Jackrabbit

Authorization in the next generation sakai will, as far as is possible, use the
default authorization capabilities exposed by Sling though some customization
may be required and maintained. Authorization in Sling is in turn built on top
of functionality exposed by jackrabbit. Jackrabbit 1.5 is transitioning to the
JSR-283 AccessControlManager API implemented by the DefaultAccessManager
providing Access Control Lists that contain Access Control Entries. Each Entry
is associated with a Principal by name, that principal identifying an
Authorizable user or group via the PrincipalManager implementation.

=head2 Sling Authz Implementation Plan

http://groups.google.com/group/sakai-kernel/web/sling-authz-implementation-plan

=head2 Users and Groups Implementation

The next generation sakai has adopted the Sling model for users and groups in
its entirety with some small extensions to allow groups where the membership is
dependent on the request context.

=head3 Authorizables

Authorizable objects form the basis of all user and group related objects
within the model. Authorizable objects:

=over

=item have a Principal and ID

=item can be referred to

=item can refer to other authorizables

=item can have properties

=item can have direct and indirect members

=back

Indirect members are as a result of some membership of an authorizable that is,
itself a member. Users are an example of an Authorizable, as are Groups.
Javadocs are available at:
http://jackrabbit.apache.org/api/1.5/org/apache/jackrabbit/api/security/user/Authorizable.html

=head3 Users

Users are Authorizables, with the ability to:

=over

=item change the user password

=item fetch user credentials

=item impersonate

=item determine if user is an admin

=back

The User object is focused on the core user needs. It is not intended to
encompass all real user properties. Although the password can be changed, and
credentials retrieved, there is no fundamental requirement that binds the user
to a password based or even server based authentication scheme. Methods
provided come from the default jackrabbit authentication scheme. Javadocs are
available at:
http://jackrabbit.apache.org/api/1.5/org/apache/jackrabbit/api/security/user/User.html

=head3 Group

Groups add additional functionality to an Authorizable to make it possible to
manage the group membership. Based on the functionality of Authorizable, a
group can be a member of another Group. Javadocs are available at:
http://jackrabbit.apache.org/api/1.5/org/apache/jackrabbit/api/security/user/Group.html

=head3 UserManager

Authorizable objects in the form of Users and Groups are unmanaged. The
UserManager provides management of these objects with:

=over

=item User Creation

=item Group Creation

=item Direct find Principal or name based

=item Search

=back

=head2 Implementation

The Jackrabbit User manager manages a tree of nodes under the
/rep:system/rep:userManager space. Nodes under
/rep:system/rep:userManager/users represent User objects with object properties
stored as nodes. Groups are stored in /rep:system/rep:userManager/groups.
Note: paths mentioned here are JCR repository paths and not HTTP URLs.  The
rep:userManager/users node has a resource type of sling/users. The
rep:userManager/groups node has a resource type of sling/groups. This enables
servlets to bind and act on these paths. More information about the jackrabbit
user manager exists at:
http://jackrabbit.apache.org/api/1.5/org/apache/jackrabbit/api/security/user/UserManager.html

When a user is created a new node is created with user properties stored as
properties on the node. The node location under the
/rep:system/rep:userManager/users path is not defined and users may be created
in subfolders to any depth. The URI for the user is always
/system/userManager/user/<userid>. The Resource Resolver inside Sling converts
this URI into the JCR repository location.

In standard Sling, users are created under the node representing the user
performing the creation. This has a potential limitation for large user
communities as many users will appear in one JCR folder. Jackrabbit advises
limiting the number of subnodes in a folder to < 1024. The next generation
sakai patches Sling to apply a standard approach to gaining scalability such
that a new user node is placed in a generated subtree three levels deep. The
number of nodes at each level is limited to 255 entries, which should scale to
160M users, provided the rest of the infrastructure can cope!

The physical JCR node path is isolated from the URI referencing the
Authorizable object. The internal path is not divulged outside the
implementation. The external URI is used to construct references between
groups. A User's membership is represented as a set of references pointing to
other Authorizable objects. Thus, locating the Authorizables (Groups) that a
user is a member of is a simple lookup of the reference properties on the
user's node. Since the Group object is also an Authorizable, it too may be a
member of other groups. In theory, a group could be a member of a user, but
that may not be helpful.

Finding the members of a group is implemented by searching for references to
the group using Jackrabbit queries. This is fractionally slower than a direct
lookup.

=head2 New Bundle for a ResourceProvider and Sling Post Operations for interacting with the jackrabbit UserManager

https://issues.apache.org/jira/browse/SLING-875

=head2 Jackrabbit 15/Sling UserManager Services

http://groups.google.com/group/sakai-kernel/web/jackrabbit-15-sling-usermanager-services

=head2 Extendable ACL Provider Implementation

http://sakai-kernel.googlegroups.com/web/DynamicACLs.png

=head2 JackRabbit / JSR283 Authz

http://sakai-kernel.googlegroups.com/web/JackrabbitAuthZ.png
