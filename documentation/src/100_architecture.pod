=head1 Architecture Overview

=head2 Apache Sling

The next generation of sakai will be built on top of the first enterprise-level
web framework dedicated to JSR-170 Java Content Repositories, the Apache
incubation project Sling (http://incubator.apache.org/sling/). Sling is a web
framework that uses a Java Content Repository, by default Apache Jackrabbit, to
store and manage content.

=head2 Apache Jackrabbit

The main purpose of Sling is to develop a content-centric Web Application
framework for Java Content Repository (JCR) based data stores. Sling is
implemented - with the notable exception of JCR Node Type management - purely
in terms of the JCR API and as such may use any JCR compliant repository. The
default implementation for Apache Jackrabbit is provided out of the box.

=head2 Everything is Content!

The mantra for JackRabbit is that everything is content but what impact does
this have on the next generation sakai architecture? Well, entities are no
longer persisted and retrieved from database tables but rather content nodes are
retrieved from a hierarchy within a JCR repository and indexed using carefully
designed views. These data heirarchies need to be designed carefully to avoid
excessive complexity and maintain efficiency. JCR directories containing too
many nodes have degraded write performance but careful design can avoid this.

Treating Sakai deployments as content stores rather than models of entities
implies they result from an authoring effort. On site creation a user decides
on a site name and access roles required. This translates to authoring a site's
meta content. As site information is added, assignments, quizzes, resources,
students, etc, these become site related content nodes. Thus, sakai content
grows as sites are created and content added. Considering all data as
hierarchical content enables elegant handling of content access and security.
Each content node has an associated Access Control List (ACL) inheritable from
parent nodes just like a file system.

=head2 MySQL

Jackrabbit can be configured as usual via the repository.xml file to use a
different backend from the default derby DB option. This should enable
clustering of the jackrabbit repo though wore work is needed to investigate
Sling clustering in general.

=head2 Java Persistence API (JPA)

The Java Persistence API is a Java programming language framework that allows
developers to manage relational data and so can be used to control interaction
with the underlying database. With Jackrabbit being used there will likely be
less direct interaction with the undelying database in the next generation
sakai, whereas the previous sakai content hosting service used the db heavily.

=head2 OSGi and Apache Felix

Whilst Sling is not an OSGi framework implementation specific application, it
features an embedded Apache Felix OSGi framework and console that provides a
dynamic runtime environment, where code and content bundles can be loaded,
unloaded and reconfigured at runtime. It is expected that Sling will also
operate inside other OSGi frameworks such as Equinox and Knopflerfish.

=head2 Bundles

Sling itself is implemented as a series of OSGi Bundles and makes extensive use
of the OSGi functionality, such as lifecycle management and the service layer.
The next generation sakai builds further upon this principle adding extra
functionality to an already feature rich system. Also, whilst OSGi
provides an HTTP Service this is further extended by the Pax Web bundle.

=head2 Pax Web

Pax Web (http://wiki.ops4j.org/display/paxweb/Pax+Web) is an OSGi R4 Http
Service implementation using Jetty. It extends OSGi Http Service with better
servlet support, filters, listeners, error pages and JSPs and some others in
order to meet the latest versions of Servlet specs.

=head2 Jetty

Jetty (http://www.mortbay.org/jetty/) is an open-source project providing a
100% java based standards compliant HTTP server, HTTP client and javax.servlet
container. It can be used as the entry point to the next generation sakai
application, or can be mounted behind an apache httpd front end.

=head2 Apache HTTPd

The Apache HTTPd implementation is an open-source HTTP server for modern
operating systems including UNIX and Windows NT. The implementation provides a
secure, efficient and extensible server that provides HTTP services in sync
with the current HTTP standards. It can act as a reliable front end to the next
generation sakai and bring additional load balancing capability as well as SSL
support and super fast static content serving.
