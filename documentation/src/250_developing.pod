=head1 Developing

=head2 Using git

Developing the next generation sakai will rely heavily on the use of git
(http://git-scm.com/). Git is a free and open source, distributed version
control system designed to handle everything from small to very large projects
with speed and efficiency. A useful introduction is available via the Git
Community Book (http://book.git-scm.com).

On some systems, git installation may be as simple as:

$ apt-get install git-core

=head2 github

To assist in developing the next generation sakai, you will need at least one
of the free (300MB quota) accounts on github (http://github.com), where next
generation sakai development is currently taking place. Once signed up, you'll
want to configure git to know your user name and email:

$ git config --global user.name "your name"
$ git config --global user.email email@address.com

You then need to set up an ssh key and paste the public key into github.
Details can be found here: http://github.com/guides/providing-your-ssh-key. You
can test whether you have it working by doing:

ssh git@github.com

Note: the test is to git@ and not your username@!

=head2 Forking

Once you have git configured to work with github, you are ready to fork the
next generation sakai code. Log in and go to:

http://github.com/ieb/open-experiments/tree/master

where you will be able to click to fork. This gives you then your own fork of
the project. If you go to your account page and click through to the fork, you
will find a public clone URL, which you can git clone to your local machine and
alter to your hearts content. Once happy, you can commit your clone changes, e.g.:

$ git commit -a

$ git push

Then either verbally contact the development lead to do a pull, or issue a pull
request through the github interface. Subject to code review your changes will
then be in!

=head2 Following forks

If you want to track changes from the open-experiments fork then add it as a
remote source in git:

$ git remote add ieb git://github.com/ieb/open-experiments.git

And use pull to merge changes across:

$ git pull ieb master

Alternatively, if you don't want to automatically merge, you can fetch, review
then merge:

$ git fetch ieb

$ git merge ieb/master

=head2 Fetching other forks

To fetch unmerged features from forks other than ieb master, such as those
listed in the graph at http://github.com/ieb/open-experiments/network, you need
to add the fork as a git checkout remote. First navigate to the repo github
page and copy the clone url.

In your git checkout run 'remote add <name> <clone url>'

Now you can do 'git fetch <name>'

and 'git checkout -b <branchname> <name>/master' allowing you to mix and match
features from various repos.

=head2 git pre-commit hook

There exists a very slightly modified version of the default git pre-commit
hook at
http://sakai-kernel.googlegroups.com/web/pre-commit?gsc=zuchPAsAAABUDOR4v2gX6zt2Ox_oS8Nr,
designed to prevent checking in code with obvious whitespace problems,
additionally reporting files and line numbers for the problems.  Place the file
in your .git/hooks/ directory at the checkout top level and ensure it is
executable.

=head2 git on windows

On windows, it seems that using git through a firewall is not necessarily easy.
There are supposed to be ways to get git to work through a proxy but you may
find some authenticating proxies won't play ball!

You may also find that you can't git pull with the latest msysGit portable
install: PortableGit-1.6.2.2-preview20090408, it seems to be missing a git-pull
binary. Try downloading Git-1.5.5-preview20080413 which should work fine apart
from the firewall issue above.
